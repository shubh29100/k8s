aws eks update-kubeconfig --region us-east-1 --name my-cluster 


kubectl cluster-info 

kubectl get nodes 

kubectl get nodes -o wide 

kubectl run my-first-pod --image=nginx

kubectl get pods 

kubectl get -o wide pods  

kubectl describe pod my-first-pod 

kubectl run my-pod --port=80 --image=nginx 

kubectl logs my-pod 

kubectl logs -c <container_name> <pod_name>

kubectl explain pods  
-------------------------------------------------
kubectl expose pod my-first-pod --port=80 --type=clusterIP 

kubectl get service 

kubectl expose pod my-first-pod --port=80 --target-port=80 --type=NodePort 

kubectl expose pod my-pod --name my-pod-lb --type=LoadBalancer --port=80 --target-port=80 

kubectl apply -f pod.yaml 

kubectl exec -it my-pod -c my-pod-container /bin/bash 

kubectl api-resources
 
kubectl delete pod my-pod 

---------------------------------------------------------
kubectl get rc 

kubectl get pods 

kubectl get -o wide pods 

kubectl delete rc 
------------------------------------------------------------------------
kubectl get namespaces 

kubectl get ns

kubectl create ns dev 

kubectl describe namespace <namespace-name>

kubectl delete namespace <namespace-name>

kubectl get -n dev all

kubectl get pods -n dev 

kubectl run my-pod --image=nginx -n dev 

kubectl apply -f <manifest-file.yaml> -n <namespace-name>
-------------------------------------------------------------------------
kubectl get deploy 

kubectl get pods 

kubectl get rs 

kubectl edit rs my-rs 

kubectl scale rs --replicas=0 my-rs 

kubectl edit deploy my-deployment 

kubectl api-resources  

kubectl scale statefulset my-ss --replicas 2 
--------------------------------------------------------------------
kubectl get configmap 

kubectl get cm 

kubectl describe configmap my-vars 

kubectl exec -it my-ss-0 -- bash 

env 
------------------------------------------------- 
echo -n "Redhat" | base64 

kubectl get secret 

kubectl describe secret my-sec 
-----------------------------------------------------------
mysql -h <endpoint of db> -u admin -pAdmin123 
-------------------------------------------------------------------------

docker push piyu5233/project:studentapp 

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

kubectl get pods -n kube-system 

kubectl top pod <pod_name> #for pods 

kubectl top node #for nodes 

kubectl get hpa -o wide 

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY*

yum -y install epel-release

yum -y update

yum install stress 

---------------------------------------------------------------------

kubectl get ingress <ingress_name> 

kubectl edit ingress <ingress_name> 

--------------------------------------------------------------------------------------
#how to create k8s cluster 

eks (elastic kubernetes service)
gke (google kubernetes service) 
aks (azure kubernetes service)

minikube (for practice purpose on local machine )

kubeadm (for big cluster on premises )

kind is a tool for running local Kubernetes clusters using Docker container “nodes”. was primarily designed for testing Kubernetes itself,
 but may be used for local development or CI. 

[ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/kind 

kind --version 

sudo dnf install docker -y 

systemctl start docker 

kind create cluster 

---------------------------------------------------------------------

#to download kubectl 

sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" 

sudo chmod +x kubectl 

sudo mv kubectl /usr/local/bin/ 

kubectl version 


kubectl cluster-info 

kind create cluster --name kind-2 #to create multi node cluster 

kind create cluster --name my-cluster --config config.yaml
